									Jenkins + Docker + Kubernetes + Terraform - Batch 06
													Kastro Kiran V
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=> Docker Installation
sudo su
cd
sudo dnf update -y
sudo dnf install docker -y
sudo systemctl start docker
sudo systemctl enable docker
sudo systemctl status docker
sudo usermod -aG docker $USER
newgrp docker
docker --version (or) docker version

=> Dockerfile Components
All the components inside the Dockerfile will be presented in CAPITAL LETTERS

1. FROM
It indicates the base image to run our application
On top of base image we can create our own images
FROM keyword is the base image which is going to give the OS for our container
If required, we can configure morethan 1 base image
Every new base image should be written in a new line

Syntax: FROM <ImageName>
FROM ubuntu
FROM tomcat
FROM nginx
FROM mongo

2. RUN
It is used to execute the commands 'while creating the docker image'
We can write multiple RUN instructions

Syntax: RUN <CommandName>
RUN mkdir kastro
RUN cd /kastro
RUN touch kastro.txt
RUN git clone <RepoURL>
RUN yum install maven -y

3. CMD
It is also used to execute the commands but 'while creating the container'
We can write multiple CMD instructions, but Docker engine will process only the last CMD instruction. Hence there is no use of writing multiple CMD instructions inside the same Dockerfile

Syntax: CMD <CommandName>
CMD mkdir kastro
CMD cd /kastro
CMD touch kastro.txt
CMD git clone <RepoURL>
CMD yum install maven -y

4. COPY
It is used to copy the files/directories to a docker image while creating the docker image
It is also used to copy the files from source location to the destination location

Syntax: COPY <SourceLocation> <DestinationLocation>

5. ADD
It is also used to copy the files from source location to destination location to the image while creating the image

COPY vs ADD
ADD command can download the files from remote location (internet)
ADD command is also used to download any s/w or files using the URL also
COPY command will take the files from one location to another

Syntax: ADD <URL-To-Download> <DestinationLocation>

Assignment: 
ERROR: failed to solve: Unavailable: error reading from server: read unix @->/run/docker.sock: read: connection reset by peer

6. WORKDIR
Whenever we go inside the container, we will going into / path by default
Using this keyword we can set the working directory for our container
It is used to go inside a desired directory as soon as we login to the container
Whatever commands that we will write after WORKDIR instruction, all those commands will get executed in the path which is mentioned in the WORKDIR

Syntax: WORKDIR <Path>

FROM ubuntu
FROM amazonlinux
RUN touch kastro.txt
RUN touch kiran.txt
WORKDIR /tmp		----> cd /tmp
RUN touch docker.txt
RUN touch kk.txt
RUN git clone <RepoURL>

7. LABEL
It is used to assign the metadata for the docker image
Labels are written in the form of Key-Value pairs

Syntax: LABEL <Key> <Value>

FROM ubuntu
FROM amazonlinux
RUN touch kastro.txt
RUN touch kiran.txt
WORKDIR /tmp		----> cd /tmp
RUN touch docker.txt
RUN touch kk.txt
RUN git clone <RepoURL>
LABEL author Kastro
LABEL email kastro@gmail.com

File (docker.txt) ----> VM ----> COPY to container ----> /tmp 
Download apache tomcat to /tmp location
Set the working directory to /tmp

FROM ubuntu
COPY docker.txt /tmp
ADD <> /tmp
WORKDIR /tmp
LABEL author Kastro

8. ENV
It is used to set the environment variable

Syntax: ENV <Key> <Value>

9. EXPOSE
To expose the application on a specific port for the outside world we will use EXPOSE key word

Repo URL: https://github.com/KastroVKiran/ECR-ECS-Project.git

FROM ubuntu
RUN apt update -y
RUN apt install apache2 -y
RUN apt install apache2-utils -y
RUN apt clean
COPY ECR-ECS-Project/ /var/www/html/
RUN service apache2 restart
EXPOSE 80
CMD ["usr/sbin/apachectl", "-D", "FOREGROUND"]

10. ENTRYPOINT
ENTRYPOINT instructions will be executed while creating the container
ENTRYPOINT instructions cannot be overided.
CMD instructions can be override 

Syntax: ENTRYPOINT <Instruction>

11. USER
We can set an username to the image or to a container

Syntax: USER <UserName>

12. VOLUME
It is used to store the data
If you want to permanently store the data then we will use DOCKER VOLUMES

13. MAINTAINER
It represent who is maintaining the Dockerfile

Syntax: MAINTAINER <AuthorName> <AuthorEmail>











